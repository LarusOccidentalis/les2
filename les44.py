#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
#Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
#Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.
from sys import argv
path, work_hours, rate, bonus = argv
work_hours, rate, bonus = map(int, argv[1:])
try:
    salary = (work_hours*rate)+bonus
    print(f'Заработная плата: {salary}')
except ValueError:
    print('Not enough values to unpack')



#2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
#Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
#Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#Результат: [12, 44, 4, 10, 78, 123].
example_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
my_new_list = [el for num, el in enumerate(example_list) if example_list[num - 1] < example_list[num]] #выучить все про enumerate
print(my_new_list)
#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
#Подсказка: используйте функцию range() и генератор.
example = [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]
print(example)
#4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.
#Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]. #1)groupby сохраняет порядок последовательности, в отличии от set, посмотреть применение
#Результат: [23, 1, 3, 10, 4, 11]                                          #2)
ex2 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
ex4 = sorted(set(ex2), key=lambda d: ex2.index(d)) #если бы нужно было просто убрать повторения
print(ex4)

ex3 = [el for el in ex2 if ex2.count(el) < 2] # создать список из посчитаных повторений меньше 2, работает
print(ex3)
ex5 = [i for i in range(0, 31) if ex2.count(i) < 2] #не работает так
print(ex5)
#5. Реализовать формирование списка, используя функцию range() и возможности генератора.
#В список должны войти чётные числа от 100 до 1000 (включая границы).
#Нужно получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().
from functools import reduce
list1 = [i for i in range(100, 1001) if i % 2 == 0]
def my_func(el1, el2):
    return el1 * el2
print(reduce(my_func, list1))

#6. Реализовать два небольших скрипта:
#итератор, генерирующий целые числа, начиная с указанного;
#итератор, повторяющий элементы некоторого списка, определённого заранее.
#Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным.
#Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа, начиная с 3.
#При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.


#for el in it1:
    #print(el)
    #if el > 10: #Мария, подскажите, почему программа не хочет при строгом условии напечатать последним элементом 10?
        #break
from itertools import count
from itertools import cycle
def count_func(first, last):
    for el in count(3):
        if el > 10:
            break
        else:
            print(el)
my_list = [1, 2, 3, 4]
def cycle_func(my_list, iteration):
    i = 0
    for el in cycle(my_list):
        if i < 10:
            print(next(iter))
            i += 1
    else:
        return




#7.Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
#При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
#Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
#1
i = input(int('Введите число факториал которого хотите вычислить'))
mylist = [i for i in range(1, n+1)]
def fact():
    for i in mylist:
        yield el[n]*el[n+1]       #Здраствуйте, я пыталась, честно)))) Не могу догнать пока, как это работает

def fact(n):
    for el in count(n):
        yield el*(el+1)
#2
from math import factorial

def fact(n):
    for i in range(1, n + 1):
        yield factorial(i)

#3
n = int(input())

factorial = 1

for i in range(1, n + 1):
    factorial *= i
    yield
#4
def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)


def factorial(n): x = 1
#5

li = list(range(1, n + 1))
for each in li:
    x = x * each print(x)  #я искала такое слово, которым бы можно было обобщить. Но такой вариант не работает(
#6
z = input('Введите чило')
g = (fact(n) for n in range(0, int(z)))


def fact(x):
    a = 1
    b = 1
    if x == 0:
        a = 1
    elif x > 0:
        while b < x:
            b += 1
    else:
        print('Введите положительное число!')

    yield a


print(next(g))  #5 дней спустя) Вроде работает, но выдает не число