#1.Создать программный файл в текстовом формате, записать в него построчно данные, вводимые пользователем.
#Об окончании ввода данных будет свидетельствовать пустая строка.
#with open(r'ququ.txt','a', encoding='utf-8') as a:
    #my_line = input("Вводите строку: ")
    #i = 0
    #while i
        #a.write(my_line + "\n")
    #print(my_line, end='')

#lines = input("Введите данные:")
#with open(r'ququ.txt','a', encoding='utf-8') as file:

    #while line in lines != ' ':
        #for line in lines:
            #file.write(line + '\n')#сказала записывать
    #else:
        #print('Вы завершили работу программы')
#print(lines)
with open(r'ququ.txt','w', encoding='utf-8') as a:
    line = input('Введите текст: ')
    while line:
        a.writelines(line + "\n")
        line = input('Введите текст: ')
    if not line:
        print("Вы вышли из программы")



#2.Создать текстовый файл (не программно), сохранить в нём несколько строк, выполнить подсчёт строк и слов в каждой строке.
#with open(r'ququ.txt','w+', encoding='utf-8') as file:
    #file.writelines(['Разработана мультиплексная ПЦР-тест-система\nдля идентификации в геноме'])

    #for i in file:
        #lines = 0
        #words = 0
        #for line in file:
            #lines += 1
            #words += len(line.split())
            #if j != ' ' and space == 0:
                #words += 1




file = open('mlpx.txt') #Открыть и поставить счетчики
lines = 0
words = 0
letters = 0

for line in file:
    lines += 1

    for symbol in line:
        if symbol not in (' ', '\n'): #исключаем пробелы и переносы строки, за каждый символ +1
            letters += 1

    space = 0
    for symbol in line:                          #Ввела счетчик для пробелов, по умолчанию 0, если встречается, то +1
        if symbol != ' ' and space == 0 :
            words += 1
            space += 1
        elif symbol == ' ':
            space = 0

print("Lines:", lines)
print("Words:", words)
print("Letters:", letters)
file.close()


#3 Создать текстовый файл (не программно). Построчно записать фамилии сотрудников и величину их окладов (не менее 10 строк).
#Определить, кто из сотрудников имеет оклад менее 20 тысяч, вывести фамилии этих сотрудников. Выполнить подсчёт средней величины дохода сотрудников.
#Пример файла:

#Иванов 23543.12
#Петров 13749.32

with open('mlpx.txt', 'r', encoding='utf-8') as f:
    workers = {}
    for line in f:
        key, value = line.split()
        workers[key] = value
        if int(value) < 20000:
            print(f'{key}: зарплата меньше 20000')


#4.Создать (не программно) текстовый файл со следующим содержимым:
#One — 1
#Two — 2
#Three — 3
#Four — 4
#Напишите программу, открывающую файл на чтение и считывающую построчно данные. При этом английские числительные должны заменяться на русские.
#Новый блок строк должен записываться в новый текстовый файл.
with open(r'task4.txt','r', encoding='utf-8') as file:
    num = {}
    replacements = {'One': 'Один', 'Two': 'Два', 'Three': 'Три', 'Four': 'Четыре'}

    data = file.readlines()
    print(data)
    for line in file:
        key, value = line.split("-")
        num[key] = value
        for key in num:
            if key in replacements:
                num[replacements[key]] = num.pop(key)










#5. Создать (программно) текстовый файл, записать в него программно набор чисел, разделённых пробелами.
#Программа должна подсчитывать сумму чисел в файле и выводить её на экран.
with open(r'task4.txt','w+', encoding='utf-8') as file:
    i = 0
    while i == 0:
        try:
            my_numbers = int(input('Введите целое число: '))
            def sum_numbers(my_numbers):
                total = 0
                for number in my_numbers:
                    total += number
                return total

        except ValueError:
            print("Введите только целое число")
        break








#6 (Дополнительно). Сформировать (не программно) текстовый файл. В нём каждая строка должна описывать учебный предмет и наличие лекционных,
#практических и лабораторных занятий по предмету. Сюда должно входить и количество занятий. Необязательно, чтобы для каждого предмета были все типы занятий.
#Сформировать словарь, содержащий название предмета и общее количество занятий по нему. Вывести его на экран.
#Примеры строк файла: Информатика: 100(л) 50(пр) 20(лаб).
#Физика: 30(л) — 10(лаб)
#Физкультура: — 30(пр) —
#Пример словаря: {“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}
#import json

subj = {}
with open('task_6.txt', 'r') as o:
    for line in o:
        subject, lecture, practice, lab = line.split()
        subj[subject] = int(lecture) + int(practice) + int(lab)
    print(f'Общее количество часов по предмету - \n {subj}')


#7(Дополнительно) . Создать вручную и заполнить несколькими строками текстовый файл, в котором каждая
#строка будет содержать данные о фирме: название, форма собственности, выручка, издержки.
#Пример строки файла: firm_1 ООО 10000 5000.

#Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль. Если фирма получила убытки, в расчёт средней прибыли её не включать.
#Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями, а также словарь со средней прибылью.
#Если фирма получила убытки, также добавить её в словарь (со значением убытков).
#Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].

#Итоговый список сохранить в виде json-объекта в соответствующий файл.
#Пример json-объекта:
 #[{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]