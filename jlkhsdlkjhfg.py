#1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
#Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
arg1 = float (input("Введите аргумент 1:"))
arg2 = float (input("Введите аргумент 2:"))
def my_divide (arg1, arg2):
    try :
        return arg1 / arg2
    except ZeroDivError:
        return
print(arg1 / arg2)

#2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя:
#имя, фамилия, год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы.
#Осуществить вывод данных о пользователе одной строкой.
name = str (input ("name"))
surname = str (input ("surname"))
date_of_birth = str (input("date_of_birth"))
city = str (input("city"))
email = str (input("email"))
phone_number = str (input("phone_number"))

def bios_data (name, surname, date_of_birth, city, email, phone_number):
    return bios_data.join([name, surname, date_of_birth, city, email, phone_number])
print (name, surname, date_of_birth, city, email, phone_number)

#3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и возвращает сумму наибольших двух аргументов.
def my_func (arg1, arg2, arg3):
    if arg1 >= arg3 and arg2 >= arg3:
        return arg1 + arg2
    elif arg1 > arg2 and arg1 < arg3:
        return arg1 + arg3
    else:
        return arg2 + arg3




#4. Программа принимает действительное положительное число x и целое отрицательное число y. Выполните возведение числа x в степень y.
#Задание реализуйте в виде функции my_func(x, y). При решении задания нужно обойтись без встроенной функции возведения числа в степень.
#Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **.
#Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

def my_func(x, y):
    return x ** y
print my_func



#5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии Enter должна выводиться сумма чисел.
#Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме.
#Но если вместо числа вводится специальный символ, выполнение программы завершается. Если специальный символ введён после нескольких чисел,
#то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.
my_str = str (input("Введите числа :"))
def sum (*args):
    return 




#6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же, но с прописной первой буквой.
#Например, print(int_func(‘text’)) -> Text.
i = str(input ("Введите текст с маленькой буквы: "))
def int_func(*args):
    return (i.title())
print(i.title())
#7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом.
#Каждое слово состоит из латинских букв в нижнем регистре. Нужно сделать вывод исходной строки,
#но каждое слово должно начинаться с заглавной буквы. Используйте написанную ранее функцию int_func().
i = str(input ("Введите текст с маленькой буквы: "))
def int_func(*args):
    return (i.title())
print(i.title())
#1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
the_list = [4, 19.5, "genetic", None]
a = 4
b = 19.5
c = "genetic"
d = None
print(type(a))
print(type(b))
print(type(c))
print(type(d))


#2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
s = [1, 2, 3, 4, 5, 6]
s[0] = 2
s[1] = 1
s[2] = 3
s[3] = 2
s[4] = 6
s[5] = 5
print(s)

s = [1, 2, 3, 4, 5, 6]

s[0], s[1] = s[1], s[0]
s[2], s[3] = s[3], s[2]
s[4], s[5] = s[5], s[4]
print(s)



# При нечётном количестве элементов последний сохранить на своём месте. Для заполнения списка элементов нужно использовать функцию input().
#3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и dict.
month = int(input("Введите номер месяца "))
seas_list = ['winter', 'spring', 'summer', 'autumn']
seas_dict = {0: 'winter', 1: 'spring', 2: 'summer', 3: 'autumn'}

if month == 1 or month == 12 or month == 2:
     print(seas_dict.get(0))
     print(seas_list[0])
elif month == 3 or month == 4 or month == 5:
    print(seas_dict.get(1))
    print(seas_list[1])
elif month == 6 or month == 7 or month == 8:
    print(seas_dict.get(2))
    print(seas_list[2])

elif month == 9 or month == 10 or month == 11:
    print(seas_dict.get(3))
    print(seas_list[3])

#4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. Строки нужно пронумеровать.
# Если слово длинное, выводить только первые 10 букв в слове.

a_str = input("Введите данные: ").split()
for i, val in enumerate(a_str):
    if len(a_str) > 10:
        print(i + 1, val[0:11])  #Здравствуйте! Я нашла метод enumerate и не могу понять, почему нельзя сделать срез для каждого значения,
                                  # в данном случае для уже разделенной строки. Ошибку не выдает, но и не работает. Выбрала не тот метод?
    else:
        print(i + 1, val)


#5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает. У пользователя нужно запрашивать
# новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
#Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
#Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
#Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
#Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
#Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].
number = int(input("Enter number: "))
my_list = [7, 4, 3, 2]
c = my_list.count(number)
for element in my_list:
    if c > 0:
        i = my_list.index(number)
        my_list.insert(i+c, number)
        break
    else:
        if number > element:
            j = my_list.index(element)
            my_list.insert(j, number)
            break
        elif number < my_list[len(my_list) - 1]:
            my_list.append(number)

print(my_list)
#6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами, то есть характеристиками товара: название, цена, количество, единица измерения.
# Структуру нужно сформировать программно, запросив все данные у пользователя.
#Пример готовой структуры:

#[
#(1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
#(2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
#(3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
#]
#Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например, название.
# Тогда значение — список значений-характеристик, например, список названий товаров.
#Пример:
#{
#“название”: [“компьютер”, “принтер”, “сканер”],
#“цена”: [20000, 6000, 2000],
#“количество”: [5, 2, 7],
#“ед”: [“шт.”]
#}

number = int(input("Введите номер продукта: "))
prod = []
features = {}
value1 = input(str("Название товара"))
value2 = input(str("Цена"))
value3 = input(str("Количество"))
value4 = input(str("Единицы измерения"))